直线检测：
	（标准）
	霍夫变换：将关于x、y的原空间转换到关于k、b的参数空间
			点(x, y)		->	直线b=-kx+y（过点xy的直线束）
			直线y=kx+b	->	点(k, b)
		将原图像的每个点变换到离散参数空间，记录每个离散点(k, b)的经过次数，超过阈值则确定直线y=kx+b
		将直线检测转换为寻找参数空间中的直线交点
		* 因为垂直于x轴的直线上的点经过变换后，成为一系列平行线，当k很大时，也有较大误差
		* 所以先将参数变换为(r：原点到直线的距离，theta：直线和x轴的夹角），直线r = x cos(theta)+y sin(theta)
		* 点(x, y）-> r = A sin(theta + phi)，仍是寻找交点
	
	// 只能检测直线存在，不能获取线段位置（两端点）

	概率霍夫变换：随机选择边缘点，当某一离散点的经过次数超过阈值后，不在继续继续累积

	多层次霍夫变换：经过一次标准霍夫变换，统计经过次数；
				变换一次r和theta的离散化的单位长度，重新统计；
				结合两次结果，得到结果

	void HoughLines(InArr images, OutArr lines, double rho, double theta, int threshold,
		double srn=0, double stn=0, double min_theta=0, double max_theta=CV_PI);
	- images：CV_8UC1的二值图；需要经过边缘检测
	- lines：Mat | vector<Vec2f>，(r, theta)
	- rho：距离分辨率（r离散化的单位长度，单位：像素）
	- theta：角度分辨率（单位：弧度）
	- threshold：离散点确定为直线的累加器阈值
	- srn：用于多尺度霍夫变换，距离分辨率' = rho / srn
	- stn：类似srn；若两者皆0，则只用标准霍夫变换
	- min/max_theta：识别直线的角度范围

	void HoughLinesP(InArr image, OutArr lines, double rho, double theta,
		int threshold, double minLineLength=0, double maxLineGap=0);
		// 渐进概率式霍夫变换；能获取直线的端点
		- lines：Mat | vector<Vec4i>，(Px, Py, Qx, Qy)
		- minLineLength：识别直线的最小长度
		- maxLineGap：当两条线段的斜率相同，且两条直线端点的距离小于该参数，则合并为一条

	void HoughLinesPointSet(InArr _point, OutArr _lines, int lines_max, int threshold,
		double min_rho, double max_rho, double rho_step,
		double min_theta, double max_theta, double theta_step);
	// 点集检测直线
	- _point：Mat(C2) | vector<Point2f/i> -> (x, y)
	- _lines：Mat(CV_64FC3) -> (经过次数, r, theta)，以经过次数倒序
	- lines_max：最多检测的直线数量
	
直线拟合：
    M-estimator：类似最小二乘法
        选取距离函数 d(r)，r为残差的绝对值
        计算损失函数 sum(d(r)) 最小时的直线参数k,b
        定义权重函数 w(r)=d'(r)/r，d'(r)为d(r)导数
        迭代计算加权损失函数 sum(w(r)*d(r))最小时的k,b
        当|k_(i) - k_(i-1)| < dk,
          |b_(i) - b_(i-1)| < db 时，输出
        // 该方法能减小极端残差的影响

    void fitLine(In points, Out line, int distType,
        double param, double reps, double aeps);
        - points：二维或三维点集
        - line：4f/6f (kx, ky (,kz), x, y (,z)) // 点斜式
        - distType=DIST_    d(r)                        C
                L1          r
                L2          r*r/2
                L12         2*(sqrt(1+r*r/2)-1)
                FAIR        C*C*(r/C-log(1+r/C)         1.3998
                WELSCH      C*C*(1-exp(-r**2/C**2))/2   2.9846
                HUBER       r*r/2       r<C
                            C*(r-C/2)   r>=C            1.345
        - param：某些d(r)中的参数值（C），0则使用默认参数
        - reps：原点到直线距离精度，0则自适应
        - aeps：角度精度，0则自适应

圆形检测：
    圆形方程 (x-a)**2 + (y-b)**2 = R
    圆上每个点(x_, y_)转换到关于(a, b)的参数空间为
        (a-x_)**2 + (b-y_)**2 = R
    遍历，累加，与阈值比较

    void HoughCircles(In image, Out circles, int method, double dp,
        double minDist, double param1=100, double param2=100,
        int minRadius, int maxRadus);
        - image：必须CV_8UC1
        - circles：3i (a, b, R)
        - method = HOUGH_GRADIENT
        - dp = 图像分辨率/离散化分辨率
        - minDist：圆心距离 < minDist则视为同一个圆
        - param1：Canny两个阈值中较大的一个，另一个=param1/2
        - param2：累加器阈值
        - min/maxRadius：要检测的圆的半径范围
        * 该函数会先调用Canny进行边缘检测

轮廓检测：
    void findContours(In image, OutArrays contours,
         int mode, int method, Point offset=Point());
        - image：CV_8UC1，只分0和非0
        - contours：vector<vector<Point> / Mat>
        - mode=RETR_
                    EXTERNAL    只检测最外层轮廓
                    LIST        检测所有轮廓，但不建立等级关系
                    CCOMP       检测所有，但只分连通域（环）的内外关系
                    TREE        检测所有，完整等级关系
        - method=CHAIN_APPROX_
                    NONE        保留轮廓的所有点
                    SIMPLE      压缩轮廓的水平、垂直和对角线，只保留顶点
                    TC89_L1
                    TC89_KCOS

    void findContours(In image, OutArrays contours, Out hierarchy,
        int mode, int method, Point offset=Point());
        - hierarchy：描述轮廓空间关系的4维向量
            如果一个轮廓B在A内部，则AB为父子关系，索引，-1则无
            4i (下一个兄弟轮廓，上一个兄弟轮廓，第一个子轮廓，父轮廓)

    void drawContours(InOut image, InArrays contours, int contourIdx,
        const Scalar &color, int thickness=1, int lineType=LINE_8,
        In hierarchy=noArray(), int maxLevel=INT_MAX, Point offset=Point());
        - contourIdx：要绘制的轮廓的索引，-1则绘制所有
        - thickness：可以=-1
        - maxLevel：0->只绘制该轮廓；1->同时绘制其所有子轮廓；以此类推

    面积：
        double contourArea(In contour, bool oriented=false);
            - orientede：面积是否有方向性

    周长：
        double arcLength(In curve, bool closed);
        - closed：是否计算第一个和最后一个点的距离

    点到轮廓距离：
        double pointPolygonTest(In contour, Point2f pt, bool measureDist);
        - measureDist=false：在轮廓内，返回1；轮廓上返回0；外返回-1
                    =true：返回距离值；内正外负

    包围：
        三角形：
        void minEnclosingTriangle(In points, Out triangle);

        圆形：
        void minEnclosingCircle(In points, Point2f &center, float &radius);
        // 后两个参数是输出用的

        多边形：
        Rect boundingRect(In array);

        RotatedRect minAreaRect(In points);
        // 旋转矩阵

        void approxPolyDP(In curve, Out approxCurve, double epsilon, bool closed);
        - epsilon：逼近曲线上点到原始曲线的最大距离
        - closed：approxCurve[0] == approxCurve[end]

    凸包：
        void convexHull(In points, Out hull, bool clockwise=false, bool returnPoints=true);
        - clockwise：输出点顺序；true顺，false逆
        - returnPoints：true输出点坐标，false输出点关于points的索引

二维码检测：
    class QRCodeDetector:

        bool detect(In img, Out points);
        - points：二维码四个顶点
        // 输出是否检测到二维码

        string decode(In img, In points, Out straight_qrcode=noArray());
        - straight_qrcode：经过矫正和二值化的二维码

        string detectAndDecode(In img, Out points=noArray(), Out straight_qrcode=noArray());

